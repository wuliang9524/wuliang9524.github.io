<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-27T06:55:24.300Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dragon Long</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PSR-Psr1</title>
    <link href="http://yoursite.com/2019/03/26/PSR-Psr1/"/>
    <id>http://yoursite.com/2019/03/26/PSR-Psr1/</id>
    <published>2019-03-26T09:37:53.000Z</published>
    <updated>2019-03-27T06:55:24.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本代码规范"><a href="#基本代码规范" class="headerlink" title="基本代码规范"></a>基本代码规范</h2><p>本规范制定了代码基本元素的相关标准，确保 PHP 代码间具有较高程度的技术互通性。</p><h2 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1.    Overview"></a>1.    Overview</h2><ul><li>PHP 文件 <strong>必须</strong> 以 <code>&lt;?php</code> 或 <code>&lt;?=</code> 标签开始；</li><li>PHP 文件 <strong>必须</strong> 以 <code>不带 BOM 的 UTF-8</code> 编码；</li><li>命名空间以及类 <strong>必须</strong> 符合 PSR 的自动加载规范： PSR-4，PSR-0 (Deprecated 已废弃)；</li><li>类的命名 <strong>必须</strong> 遵循 <code>StudlyCaps</code> 大写开头的骆峰命名规范；</li><li>方法命名 <strong>必须</strong> 符合 <code>camelCase()</code> 小写开头的骆峰命名规范；</li><li>类中的常量所有字母都 <strong>必须</strong> 大写，单词间用 <code>_</code> 下划线分隔；</li><li>PHP 文件 <strong>应该</strong> 只定义类、函数、常量等声明，或其它会产生 副作用( side-effects ) 的操作(生成文件输出、更改 .ini 配置文件等)，但 <strong>不该</strong> 同时出现(Do Both)。</li></ul><h2 id="2-Files"><a href="#2-Files" class="headerlink" title="2.    Files"></a>2.    Files</h2><h3 id="2-1-PHP-标签"><a href="#2-1-PHP-标签" class="headerlink" title="2.1.    PHP 标签"></a>2.1.    PHP 标签</h3><p>PHP 代码 <strong>必须</strong> 使用 长标签 <code>&lt;?php ?&gt;</code> <em>长标签</em> 或 <code>&lt;?= ?&gt;</code> <em>短标签</em> 输出；</p><p><strong>一定不可</strong> 使用其它自定义标签。</p><h3 id="2-2-字符编码"><a href="#2-2-字符编码" class="headerlink" title="2.2.    字符编码"></a>2.2.    字符编码</h3><p>PHP 代码 <strong>必须</strong> 且只可使用 <code>不带 BOM 的 UTF-8</code> 编码。</p><h3 id="2-3-副作用-side-effects"><a href="#2-3-副作用-side-effects" class="headerlink" title="2.3.    副作用( side-effects )"></a>2.3.    副作用( side-effects )</h3><p>PHP 文件中 <strong>应该</strong> 要么只定义新的声明，如类、函数或常量等不产生「副作用」的操作，要么只写会产生「副作用」 的逻辑操作，但 <strong>不该</strong> 同时具有两者。</p><p>「副作用」( side-effects )：仅通过包含文件，不直接声明类、函数或常量等，而执行的逻辑操作。</p><p>「副作用」包含且不仅限于：</p><ul><li>生成输出</li><li>直接的 <code>require</code> 或 <code>include</code></li><li>连接外部服务</li><li>修改 ini 配置</li><li>抛出错误或异常</li><li>修改全局或静态变量</li><li>读写文件等</li></ul><p>以下举一 「反例」则一目了然，包含「函数声明」和产生「副作用」的例子：</p><pre><code>&lt;?php//「副作用」：生成输出echo &quot;&lt;html&gt;\n&quot;;//「副作用」：修改 ini 配置ini_set(&apos;error_reporting&apos;, E_ALL);//「副作用」:引入文件include &quot;file.php&quot;;// 声明函数function test(){    //函数主体部分}</code></pre><h2 id="3-Namespace-and-Class-Names"><a href="#3-Namespace-and-Class-Names" class="headerlink" title="3.    Namespace and Class Names"></a>3.    Namespace and Class Names</h2><p>命名空间以及类的命名必须遵循 PSR-4 规范。</p><p>根据规范，每个类都独立一个文件，且命名空间至少有一个层次：顶级的「组织名称」( vendor name )。</p><p>“vendor”: Someone who promotes or exchanges goods or services for money.</p><p>类的命名 <strong>必须</strong> 遵循 <code>StudlyCaps</code> 大写开头的骆峰命名规范。</p><p>PHP 5.3 及以后版本的代码 <strong>必须</strong> 使用正式的命名空间。</p><pre><code>&lt;?php//PHP 5.3 及以后版本写法namespace Vendor\Model;class Foo{}</code></pre><p>PHP 5.2.x 及以前的版本 <strong>应该</strong> 使用伪命名空间的写法，约定俗成使用顶级的「组织名称」，如 <code>Vendor_</code> 为类前缀。</p><pre><code>&lt;?php// PHP 5.2.x 及之前版本写法class Vendor_Model_Foo{}</code></pre><h2 id="4-Class-Constants-Properties-and-Methods"><a href="#4-Class-Constants-Properties-and-Methods" class="headerlink" title="4.    Class Constants,Properties,and Methods"></a>4.    Class Constants,Properties,and Methods</h2><p>The term “class” refers to all <strong>classes</strong>, <strong>interfaces</strong>, and <strong>traits</strong>.</p><h3 id="4-1-常量-Constants"><a href="#4-1-常量-Constants" class="headerlink" title="4.1.    常量(Constants)"></a>4.1.    常量(Constants)</h3><p>类常量所有字母都 <strong>必须</strong> 大写，词间用 <code>_</code> 下划线分隔。</p><h3 id="4-2-属性-Properties"><a href="#4-2-属性-Properties" class="headerlink" title="4.2.    属性(Properties)"></a>4.2.    属性(Properties)</h3><p>类的属性命名 <strong>可以</strong> 遵循：</p><ul><li>大写开头的骆峰规范 <code>$StudlyCaps</code></li><li>小写开头的骆峰规范 <code>$camelCase</code></li><li>或者下划线分隔形式 <code>$under_score</code></li></ul><p>本规范不强制要求，但一定范围内 <strong>应该</strong> 保持一致。这个范围可以是整个团队、整个包、整个类或整个方法。</p><h3 id="4-3-方法-Methods"><a href="#4-3-方法-Methods" class="headerlink" title="4.3.    方法(Methods)"></a>4.3.    方法(Methods)</h3><p>方法名称 <strong>必须</strong> 符合 <code>camelCase()</code> 式的小写开头骆峰命名规则。</p><hr><blockquote><p>   文章中会有一些必要的英文原著、备注，这是由于本人觉得在技术文档上，相比译文，原来的英文能在理解上有更大的帮助。</p></blockquote><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>GitHub:    <a href="https://github.com/php-fig/fig-standards" target="_blank" rel="noopener">https://github.com/php-fig/fig-standards</a></p><p>php-fig：    <a href="https://www.php-fig.org/psr/" target="_blank" rel="noopener">https://www.php-fig.org/psr/</a></p><p>社区翻译：    <a href="https://learnku.com/docs/psr" target="_blank" rel="noopener">https://learnku.com/docs/psr</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本代码规范&quot;&gt;&lt;a href=&quot;#基本代码规范&quot; class=&quot;headerlink&quot; title=&quot;基本代码规范&quot;&gt;&lt;/a&gt;基本代码规范&lt;/h2&gt;&lt;p&gt;本规范制定了代码基本元素的相关标准，确保 PHP 代码间具有较高程度的技术互通性。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="PSR" scheme="http://yoursite.com/tags/PSR/"/>
    
  </entry>
  
  <entry>
    <title>PSR-What Is Psr</title>
    <link href="http://yoursite.com/2019/03/26/PSR-What-Is-Psr/"/>
    <id>http://yoursite.com/2019/03/26/PSR-What-Is-Psr/</id>
    <published>2019-03-26T09:29:07.000Z</published>
    <updated>2019-03-27T06:55:24.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP-FIG"><a href="#PHP-FIG" class="headerlink" title="PHP FIG"></a>PHP FIG</h2><p>PSR (PHP Standard Recommendations)　是由 PHP FIG 组织制定的 PHP 规范，是 PHP 开发的实践标准。</p><p>PHP FIG , FIG ( Framework Interoperability Group ) 框架可互用性小组的缩写。</p><p>PSR 的目的在于：通过框架作者或代表之间的讨论，以最低程度的限制，制定一个协作标准，各个框架遵循统一的编码规范，避免各家<br>自行发展的风格阻碍了 PHP 的发展，解决这个程序设计师由来已久的困扰。</p><h2 id="状态说明"><a href="#状态说明" class="headerlink" title="状态说明"></a>状态说明</h2><p>目前已表决通过了不少套标准，也不排除有弃用的标准。标准的状态分以下几种：</p><ul><li>已通过 ( ACCEPTED )</li><li>审阅中 ( REVIEW )</li><li>起草中 ( DRAFT )</li><li>未通过 ( ABANDONED )</li><li>已弃用 ( DEPRECATED )</li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>GitHub:    <a href="https://github.com/php-fig/fig-standards" target="_blank" rel="noopener">https://github.com/php-fig/fig-standards</a></p><p>php-fig：    <a href="https://www.php-fig.org/psr/" target="_blank" rel="noopener">https://www.php-fig.org/psr/</a></p><p>社区翻译：    <a href="https://learnku.com/docs/psr" target="_blank" rel="noopener">https://learnku.com/docs/psr</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PHP-FIG&quot;&gt;&lt;a href=&quot;#PHP-FIG&quot; class=&quot;headerlink&quot; title=&quot;PHP FIG&quot;&gt;&lt;/a&gt;PHP FIG&lt;/h2&gt;&lt;p&gt;PSR (PHP Standard Recommendations)　是由 PHP FIG 组织制定
      
    
    </summary>
    
    
      <category term="PSR" scheme="http://yoursite.com/tags/PSR/"/>
    
  </entry>
  
</feed>
